/**************************************************************************MultiLocus - calc diversity in allellic data.Credits:- By Paul-Michael Agapow & Austin Burt, 1999, Dept. Biology, Imperial  College at London WC1E 6BT, UK.- <mail://p.agapow@ucl.ac.uk> <mail://a.burt@ic.ac.uk>  <http://gershwin.bio.ic.ac.uk>About:- The program first ask some questions about the data set, and asks what  you want to do with it. It can:  - calculate 5 statistics:    - the number of different genotypes    - the genotypic diversity (calculated as 1-Sum[p(i)^2, i], where p(i)      is the frequency of the i-th genotype).    - of all n(n-1)/2 possible pairs of loci, how many are "compatible".      For biallelic loci, "compatible" means that no more than 3 of the 4      possible genotypes (00, 01, 10, 11) are observed in the data set.      [Note this will tend to decrease as sample size of isolates      increases.]    - the index of association (Maynard Smith et al.)    - mean standardized covariance (rBar, my formula).  - search for partitions in the dataset which don't share polymorphisms  - output the data in PAUP format.- The input data should be in a file in the same folder as the program,  with the alleles coded as single letters, digits, or symbols, separated  by whitespace (space, tab, etc), with unknown as ?. Each row should be  a different isolate, each column a different site; there should not be  any site or isolate labels; if there are partitions to be tested or if  sites are in loci, these must be contiguous. Only variable sites are  needed for the statistics, only informative sites for the test for  partitions and the output for PAUP.**************************************************************************/#ifndef MULTILOCUSAPP_H#define MULTILOCUSAPP_H// *** INCLUDES#include "ConsoleMenuApp.h"#include "CommandMgr.h"#include "MultiLocusModel.h"#include <string>// *** CONSTANTS & DEFINES// *** CLASS DECLARATION *************************************************/class MultiLocusApp: public ConsoleMenuApp{public:	// Lifecycle	MultiLocusApp	();	~MultiLocusApp ();			// Services			void	LoadMenu		();						// obligatory override	bool	UpdateCmd	( cmdId_t iCmdId );	// obligatory override	void	ObeyCmd		( cmdId_t iCmdId );	// obligatory override	// Commands	void		FindParts			();	void		CalcPopDiff 		();	void		CalcPopDiffChoice ();	void		CalcPlotDiv			();	void		LoadDataFile		();	void		CalcDiversity 		();	void		PrintDataSet		();	void		DefLinkageGroups	();	void		DefPopGroups		();	void		SetPrefs				();			MultiLocusModel*		mModel;	// MultiLocus engineprivate:	std::string		mDataFilePath;		// name of input data};#endif// *** END ***************************************************************/